import streamlit as st
import datetime
import os
import json
import firebase_admin
from firebase_admin import credentials, firestore
from login_unificado import autenticar_usuario, registrar_usuario

def render():
    # Inicializa√ß√£o Firebase (uma √∫nica vez)
    if not firebase_admin._apps:
        cred_json = os.getenv("FIREBASE_CREDENTIALS")
        cred_dict = json.loads(cred_json)
        cred = credentials.Certificate(cred_dict)
        firebase_admin.initialize_app(cred)
    db = firestore.client()

    # Controla o estado de login na sess√£o
    if "usuario" not in st.session_state:
        st.session_state["usuario"] = None

    # Se n√£o estiver logado, exibe formul√°rio de login
    if st.session_state["usuario"] is None:
        st.title("üîê Login - Painel do Cidad√£o")
        with st.form("login_form"):
            email = st.text_input("E-mail")
            senha = st.text_input("Senha", type="password")
            if st.form_submit_button("Entrar"):
                sucesso, resultado = autenticar_usuario(email, senha)
                if sucesso:
                    st.session_state["usuario"] = resultado
                    st.success(f"Logado como: {resultado['email']}")
                    st.rerun()
                else:
                    st.error(resultado)
        st.info("Por favor, fa√ßa login para acessar o painel.")
        return  # Encerra aqui se n√£o estiver logado

    # ==============================================
    # TUDO ABAIXO S√ì √â EXECUTADO SE O USU√ÅRIO ESTIVER LOGADO
    # ==============================================
    
    # Sidebar com informa√ß√µes r√°pidas
    with st.sidebar:
        st.subheader("‚ÑπÔ∏è Informa√ß√µes R√°pidas")
        st.markdown("""
        **Prazo M√°ximo de Resposta:**  
        ‚è±Ô∏è 15 dias √∫teis  
        
        **Canais de Atendimento:**  
        üìû (31) 3399-7100  
        üìß lgpd@ipem.mg.gov.br  
        
        **Hor√°rio de Atendimento:**  
        üïí Seg-Sex: 8h √†s 18h
        """)

    # Se√ß√£o de Tipos de Solicita√ß√µes
    st.header("üìã Tipos de Solicita√ß√µes")
    
    with st.expander("üîç Confirmar Exist√™ncia de Dados (Artigo 18-I)"):
        st.markdown("""
        **O que voc√™ pode solicitar:**
        - Verifica√ß√£o se o IPEM-MG possui seus dados cadastrais
        
        **Documenta√ß√£o necess√°ria:**
        - C√≥pia do documento de identifica√ß√£o
        
        **Prazo m√°ximo:** 24 horas (resposta simplificada)
        """)
    
    with st.expander("üìÇ Acesso aos Dados (Artigo 18-II)"):
        st.markdown("""
        **O que voc√™ pode solicitar:**
        - C√≥pia completa de todos seus dados armazenados
        - Hist√≥rico de uso dos dados
        - Informa√ß√£o sobre o compartilhamento dos dados
        
        **Prazo m√°ximo:** 15 dias √∫teis
        """)
    
    with st.expander("‚úèÔ∏è Corre√ß√£o de Dados (Artigo 18-III)"):
        st.markdown("""
        **Quando solicitar:**
        - Dados desatualizados
        - Informa√ß√µes incorretas
        - Registros incompletos
        
        **Anexos obrigat√≥rios:**
        - Documento comprobat√≥rio da corre√ß√£o
        - Identifica√ß√£o v√°lida
        """)
    
    with st.expander("‚ÑπÔ∏è Informativa"):
        st.markdown("""
        - **Qualquer** informa√ß√£o relacionada √† **Lei de Prote√ß√£o de Dados**
        dever√° ser solicitada pelo formul√°rio abaixo.
        """)
    
    with st.expander("üóëÔ∏è Exclus√£o de Dados (Artigo 18-VI)"):
        st.markdown("""
        **Condi√ß√µes para exclus√£o:**
        - Dados coletados com consentimento
        - Finalidade original cumprida
        - Sem obriga√ß√£o legal de armazenamento

        **Exce√ß√µes Legais (Artigo 4¬∫ da LGPD):**  
        O IPEM-MG poder√° reter dados pessoais mesmo ap√≥s o cumprimento da finalidade original nos seguintes casos:
        
        - üîí **Seguran√ßa Nacional e Defesa:**  
          Para prote√ß√£o do territ√≥rio nacional e atividades estrat√©gicas de Estado
        
        - üõ°Ô∏è **Investiga√ß√£o Criminal:**  
          Em procedimentos de apura√ß√£o de infra√ß√µes penais sob tutela judicial
        
        - üö® **Emerg√™ncias de Sa√∫de P√∫blica:**  
          Para controle de epidemias e prote√ß√£o coletiva (ex: pandemias)
        
        - üìä **Pesquisas Cient√≠ficas:**  
          Estudos realizados por √≥rg√£os de pesquisa com dados anonimizados

        **Base Legal:**  
        *"Nos termos do Artigo 4¬∫, III da LGPD, esses tratamentos s√£o regidos por legisla√ß√£o espec√≠fica que garante medidas proporcionais e necess√°rias ao interesse p√∫blico, com total observ√¢ncia dos direitos fundamentais."*
        
        **‚ö†Ô∏è Aten√ß√£o:**  
        A reten√ß√£o nestes casos segue protocolos rigorosos de seguran√ßa e √© periodicamente auditada pela Autoridade Nacional de Prote√ß√£o de Dados (ANPD).
        """)

    # Se√ß√£o de Processo de Solicita√ß√£o
    st.markdown("---")
    st.header("üì® Como Fazer uma Solicita√ß√£o")

    # Orienta√ß√µes Importantes acima do formul√°rio
    st.subheader("üìå Orienta√ß√µes Importantes")
    st.markdown("""
    1. Preencha todos os campos obrigat√≥rios  
    2. Anexe documentos leg√≠veis  
    3. Verifique seu e-mail regularmente  
    4. Mantenha seu protocolo de atendimento  
    5. Respeite os prazos legais

    ‚ö†Ô∏è Solicita√ß√µes fraudulentas ser√£o investigadas
    """)

    # Formul√°rio ocupando toda a linha
    with st.form("nova_solicitacao"):
        st.subheader("Nova Solicita√ß√£o")
        tipo = st.selectbox("Tipo de Solicita√ß√£o", [
            "Acesso aos Dados",
            "Corre√ß√£o de Dados",
            "Exclus√£o de Dados",
            "Portabilidade",
            "Outros"
        ])
        descricao = st.text_area("Descreva sua solicita√ß√£o em detalhes")
        anexos = st.file_uploader("Anexar documentos comprobat√≥rios", accept_multiple_files=True)

        if st.form_submit_button("Enviar Solicita√ß√£o"):
            data_prevista = datetime.datetime.now() + datetime.timedelta(days=15)
            st.success(f"""
            ‚úÖ Solicita√ß√£o registrada com sucesso!  
            **Protocolo:** LGPD-{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}  
            **Previs√£o de resposta:** {data_prevista.strftime('%d/%m/%Y')}
            """)

    # Se√ß√£o de Prazos e Multas
    st.markdown("---")
    st.subheader("‚è≥ Prazos e Consequ√™ncias Legais")
    st.markdown("""
    | Situa√ß√£o           | Prazo      | Consequ√™ncia                   |
    |--------------------|------------|--------------------------------|
    | Resposta inicial   | 15 dias    | -                              |
    | Prorroga√ß√£o        | +15 dias   | Notifica√ß√£o obrigat√≥ria        |
    | Descumprimento     | -          | Multa de at√© 2% do faturamento |
    """, unsafe_allow_html=True)

    # FAQ
    st.markdown("---")
    st.subheader("‚ùì Perguntas Frequentes")

    with st.expander("O que fazer se n√£o receber resposta?"):
        st.markdown("""
        1. Verifique sua caixa de spam
        2. Entre em contato via telefone
        3. Encaminhe reclama√ß√£o para ANPD
        """)

    with st.expander("Posso solicitar dados de terceiros?"):
        st.markdown("""
        ‚ùå N√£o. Voc√™ s√≥ pode solicitar informa√ß√µes sobre seus pr√≥prios dados pessoais, exceto:
        - Com autoriza√ß√£o judicial
        - Em casos de tutela coletiva
        """)

    # Rodap√©
    st.markdown("---")
    st.markdown(f"""
    <div style="text-align: center; color: gray;">
        ‚ÑπÔ∏è Atendimento regulamentado pela Lei n¬∫ 13.709/2018 (LGPD)<br>
        √öltima atualiza√ß√£o: {datetime.datetime.now().strftime("%d/%m/%Y")}
    </div>
    """, unsafe_allow_html=True)

    # Se√ß√£o de Solicita√ß√µes Existentes
    usuario = st.session_state["usuario"]
    if usuario.get("tipo") in ["cidadao", "admin"]:
        st.sidebar.success(f"üë§ Logado como: {usuario['email']}")
        st.header("üì¨ Minhas Solicita√ß√µes")
        solicitacoes_ref = db.collection("solicitacoes")
        query = solicitacoes_ref.where("email", "==", usuario["email"])
        docs = query.stream()

        tem_solicitacoes = False
        for doc in docs:
            tem_solicitacoes = True
            data = doc.to_dict()
            with st.expander(f"üìå {data['mensagem']} ({data['data_envio']})"):
                if "resposta" in data:
                    st.success("üí¨ Resposta do IPEM:")
                    st.markdown(data["resposta"])
                    st.caption(f"üïí Respondido em: {data.get('data_resposta', 'Data n√£o registrada')}")
                else:
                    st.info("‚è≥ Ainda aguardando resposta do IPEM.")
        
        if not tem_solicitacoes:
            st.info("Nenhuma solicita√ß√£o encontrada.")

        st.markdown("---")
        st.subheader("üì® Enviar Nova Solicita√ß√£o")
        nova_msg = st.text_area("Digite sua solicita√ß√£o", key="txt_nova_solicitacao")
        if st.button("Enviar Solicita√ß√£o", key="btn_enviar_solicitacao"):
            if nova_msg.strip():
                db.collection("solicitacoes").add({
                    "email": usuario["email"],
                    "mensagem": nova_msg.strip(),
                    "data_envio": datetime.datetime.now().strftime("%d/%m/%Y %H:%M"),
                    "lido": False
                })
                st.success("‚úÖ Solicita√ß√£o enviada com sucesso!")
                st.rerun()
            else:
                st.warning("Por favor, digite a mensagem antes de enviar.")
        
        # Bot√£o de Sair
        if st.button("Sair", key="btn_sair_painel"):
            st.session_state["usuario"] = None
            st.rerun()
    else:
        st.warning("‚ö†Ô∏è Voc√™ n√£o tem permiss√£o para acessar o painel cidad√£o.")

if __name__ == "__main__":
    render()
