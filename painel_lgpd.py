import streamlit as st
import datetime
import os
import pytz
import json
import firebase_admin
from firebase_admin import credentials, firestore
from login_unificado import autenticar_usuario, registrar_usuario

def render():
    # === Inicializa√ß√£o do Firebase (executa apenas uma vez) ===
    if not firebase_admin._apps:
        cred_json = os.getenv("FIREBASE_CREDENTIALS")
        cred_dict = json.loads(cred_json)
        cred = credentials.Certificate(cred_dict)
        firebase_admin.initialize_app(cred)
    db = firestore.client()

    st.markdown("""
    <h1 style='text-align: center;'>üîê Painel LGPD</h1>
    """, unsafe_allow_html=True)
    st.markdown("---")

    # === Estado de sess√£o ===
    if "modo_auth" not in st.session_state:
        st.session_state["modo_auth"] = "login"  # Pode ser "login" ou "registro"
    if "usuario" not in st.session_state:
        st.session_state["usuario"] = None

    # === AUTENTICA√á√ÉO ===
    if st.session_state["usuario"] is None:
        # T√≠tulo da se√ß√£o de login/registro
        st.subheader("Acesse ou crie sua conta")

        # Bot√µes para alternar entre login e registro
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîë Login"):
                st.session_state["modo_auth"] = "login"
        with col2:
            if st.button("üìù Registro"):
                st.session_state["modo_auth"] = "registro"
        st.markdown("---")

        # === Formul√°rio de Login ===
        if st.session_state["modo_auth"] == "login":
            with st.form("form_login"):
                st.subheader("üîë Login")
                email = st.text_input("E-mail*")
                senha = st.text_input("Senha*", type="password")
                login_submit = st.form_submit_button("Entrar")

                if login_submit:
                    if not email or not senha:
                        st.warning("Por favor, preencha todos os campos.")
                    else:
                        sucesso, resultado = autenticar_usuario(email, senha)
                        if sucesso:
                            st.session_state["usuario"] = resultado
                            st.success("‚úÖ Login realizado com sucesso!")
                            st.rerun()
                        else:
                            st.error(f"Erro ao fazer login: {resultado}")

        # === Formul√°rio de Registro ===
        elif st.session_state["modo_auth"] == "registro":
            with st.form("form_registro"):
                st.subheader("üìù Registro")
                nome = st.text_input("Nome completo*")
                telefone = st.text_input("Telefone*")
                email_reg = st.text_input("E-mail*")
                senha_reg = st.text_input("Senha*", type="password")
                senha_conf = st.text_input("Confirme a senha*", type="password")
                registro_submit = st.form_submit_button("Registrar")

                if registro_submit:
                    if not all([nome.strip(), telefone.strip(), email_reg.strip(), senha_reg.strip(), senha_conf.strip()]):
                        st.warning("Por favor, preencha todos os campos obrigat√≥rios.")
                    elif senha_reg != senha_conf:
                        st.error("As senhas n√£o coincidem.")
                    elif len(senha_reg) < 6:
                        st.error("A senha deve ter pelo menos 6 caracteres.")
                    else:
                        try:
                            sucesso, msg = registrar_usuario(
                                email=email_reg,
                                senha=senha_reg,
                                nome=nome,
                                telefone=telefone,
                                tipo="cidadao"
                            )
                            if sucesso:
                                st.success("‚úÖ Registro conclu√≠do! Agora voc√™ pode fazer login.")
                                st.session_state["modo_auth"] = "login"
                                st.rerun()
                            else:
                                st.error(f"Erro no registro: {msg}")
                        except Exception as e:
                            st.error(f"Erro inesperado: {str(e)}")

        # ‚ö†Ô∏è Impede que o restante do app carregue sem login
        st.stop()


    # CONTE√öDO VIS√çVEL AP√ìS LOGIN
    usuario = st.session_state["usuario"]
    col1, col2 = st.columns([4, 1])
    with col1:
        st.success(f"üë§ Logado como: {usuario['email']} ({usuario['tipo']})")
    with col2:
        if st.button("üö™ Sair"):
            # Limpa sess√£o e volta para login
            st.session_state["usuario"] = None
            st.session_state["modo_auth"] = "login"
            st.rerun()

    # Se√ß√£o de Tipos de Solicita√ß√µes
    st.header("üìã Tipos de Solicita√ß√µes")
    with st.expander("üîç Confirmar Exist√™ncia de Dados (Artigo 18-I)"):
        st.markdown("""
        **O que voc√™ pode solicitar:**
        - Verifica√ß√£o se o IPEM-MG possui seus dados cadastrais

        **Documenta√ß√£o necess√°ria:**
        - C√≥pia do documento de identifica√ß√£o

        **Prazo m√°ximo:** 24 horas (resposta simplificada)
        """)
    with st.expander("üìÇ Acesso aos Dados (Artigo 18-II)"):
        st.markdown("""
        **O que voc√™ pode solicitar:**
        - C√≥pia completa de todos seus dados armazenados
        - Hist√≥rico de uso dos dados
        - Informa√ß√£o sobre o compartilhamento dos dados

        **Prazo m√°ximo:** 15 dias √∫teis
        """)
    with st.expander("‚úèÔ∏è Corre√ß√£o de Dados (Artigo 18-III)"):
        st.markdown("""
        **Quando solicitar:**
        - Dados desatualizados
        - Informa√ß√µes incorretas
        - Registros incompletos

        **Anexos obrigat√≥rios:**
        - Documento comprobat√≥rio da corre√ß√£o
        - Identifica√ß√£o v√°lida
        """)
    with st.expander("‚ÑπÔ∏è Informativa"):
        st.markdown("""
        - **Qualquer** informa√ß√£o relacionada √† **Lei de Prote√ß√£o de Dados**
        dever√° ser solicitada pelo formul√°rio abaixo.
        """)
    with st.expander("üóëÔ∏è Exclus√£o de Dados (Artigo 18-VI)"):
        st.markdown("""
        **Condi√ß√µes para exclus√£o:**
        - Dados coletados com consentimento
        - Finalidade original cumprida
        - Sem obriga√ß√£o legal de armazenamento

        **Exce√ß√µes Legais (Artigo 4¬∫ da LGPD):**  
        O IPEM-MG poder√° reter dados pessoais mesmo ap√≥s o cumprimento da finalidade original nos seguintes casos:
        - üîí **Seguran√ßa Nacional e Defesa:** Para prote√ß√£o do territ√≥rio nacional e atividades estrat√©gicas de Estado
        - üõ°Ô∏è **Investiga√ß√£o Criminal:** Em procedimentos de apura√ß√£o de infra√ß√µes penais sob tutela judicial
        - üö® **Emerg√™ncias de Sa√∫de P√∫blica:** Para controle de epidemias e prote√ß√£o coletiva (ex: pandemias)
        - üìä **Pesquisas Cient√≠ficas:** Estudos realizados por √≥rg√£os de pesquisa com dados anonimizados

        **Base Legal:**  
        *"Nos termos do Artigo 4¬∫, III da LGPD, esses tratamentos s√£o regidos por legisla√ß√£o espec√≠fica que garante medidas proporcionais e necess√°rias ao interesse p√∫blico, com total observ√¢ncia dos direitos fundamentais."*

        **‚ö†Ô∏è Aten√ß√£o:**  
        A reten√ß√£o nestes casos segue protocolos rigorosos de seguran√ßa e √© periodicamente auditada pela Autoridade Nacional de Prote√ß√£o de Dados (ANPD).
        """)

    # Se√ß√£o de Processo de Solicita√ß√£o
    st.markdown("---")
    st.header("üì® Como Fazer uma Solicita√ß√£o")
    st.subheader("üìå Orienta√ß√µes Importantes")
    st.markdown("""
    1. Preencha todos os campos obrigat√≥rios  
    2. Anexe documentos leg√≠veis  
    3. Verifique seu e-mail regularmente  
    4. Mantenha seu protocolo de atendimento  
    5. Respeite os prazos legais

    ‚ö†Ô∏è Solicita√ß√µes fraudulentas ser√£o investigadas
    """)

    # Minhas Solicita√ß√µes (compacta, antes do formul√°rio)
    st.markdown("### üì¨ Minhas Solicita√ß√µes")
    docs = db.collection("solicitacoes").where("usuario_id", "==", st.session_state.usuario['email']).stream()
    tem_solicitacoes = False
    for doc in docs:
        tem_solicitacoes = True
        data = doc.to_dict()
        status = data.get("status", "Pendente")
        resposta = data.get("resposta")
        protocolo = data.get("protocolo", "")
        tipo = data.get("tipo", "")
        resumo = data.get("descricao", "")[:60] + "..." if len(data.get("descricao", "")) > 60 else data.get("descricao", "")
        with st.expander(f"Protocolo: {protocolo} | Tipo: {tipo} | Status: {status}"):
            st.markdown(f"**Resumo:** {resumo}")
            if resposta:
                st.success("üì¢ Sua solicita√ß√£o j√° foi respondida pelo IPEM!")
                st.markdown(f"**Resposta:** {resposta}")
    if not tem_solicitacoes:
        st.info("Voc√™ ainda n√£o enviou nenhuma solicita√ß√£o.", icon="‚ÑπÔ∏è")

    # Formul√°rio Nova Solicita√ß√£o
    with st.form("nova_solicitacao"):
        st.subheader("Nova Solicita√ß√£o")
        nome_solicitante = st.text_input("Nome do Titular*")  # <- Nome livre que ele informa
        telefone = st.text_input("Telefone para contato*")
        tipo = st.selectbox("Tipo de Solicita√ß√£o*", [
            "Acesso aos Dados",
            "Corre√ß√£o de Dados",
            "Exclus√£o de Dados",
            "Portabilidade",
            "Outros"
        ])
        descricao = st.text_area("Descreva sua solicita√ß√£o em detalhes*")
        anexos = st.file_uploader("Anexar documentos comprobat√≥rios", accept_multiple_files=True)
        submitted = st.form_submit_button("Enviar Solicita√ß√£o")
    
        if submitted:
            if not all([nome_solicitante.strip(), telefone.strip(), tipo.strip(), descricao.strip()]):
                st.error("‚ö†Ô∏è Preencha todos os campos obrigat√≥rios (marcados com *)")
            else:
                protocolo = f"LGPD-{datetime.datetime.now(timezone_brasilia).strftime('%Y%m%d%H%M%S%f')}"
                try:
                    # üî• Buscar CPF do cadastro
                    usuario_doc = db.collection("usuarios").document(usuario['email']).get()
                    usuario_data = usuario_doc.to_dict() if usuario_doc.exists else {}
    
                    cpf = usuario_data.get('cpf', '---')
    
                    agora = datetime.datetime.now(timezone_brasilia).isoformat()
    
                    doc_ref = db.collection("solicitacoes").document(protocolo)
                    doc_ref.set({
                        "protocolo": protocolo,
                        "email": usuario['email'],
                        "nome": nome_solicitante,  # <- Nome informado no formul√°rio
                        "cpf": cpf,  # <- CPF puxado automaticamente do cadastro
                        "telefone": telefone,
                        "tipo": tipo,
                        "descricao": descricao,
                        "anexos": [file.name for file in anexos] if anexos else [],
                        "data_envio": agora,
                        "status": "Recebido",
                        "responsavel": None,
                        "resposta": None,
                        "usuario_id": usuario['email']
                    })
    
                    st.success(f"""
                    ‚úÖ Solicita√ß√£o registrada com sucesso!  
                    **Protocolo:** {protocolo}  
                    **Previs√£o de resposta:** {(datetime.datetime.now(timezone_brasilia) + datetime.timedelta(days=15)).strftime('%d/%m/%Y')}
                    """)
                except Exception as e:
                    st.error(f"Erro ao enviar solicita√ß√£o: {str(e)}")
            st.rerun()


    # Se√ß√£o de Prazos e Multas
    st.markdown("---")
    st.subheader("‚è≥ Prazos e Consequ√™ncias Legais")
    st.markdown("""
    | Situa√ß√£o           | Prazo      | Consequ√™ncia                   |
    |--------------------|------------|--------------------------------|
    | Resposta inicial   | 15 dias    | -                              |
    | Prorroga√ß√£o        | +15 dias   | Notifica√ß√£o obrigat√≥ria        |
    | Descumprimento     | -          | Multa de at√© 2% do faturamento |
    """, unsafe_allow_html=True)

    # FAQ
    st.markdown("---")
    st.subheader("‚ùì Perguntas Frequentes")
    with st.expander("O que fazer se n√£o receber resposta?"):
        st.markdown("""
        1. Entre em contato via telefone
        2. Encaminhe reclama√ß√£o para ANPD [**Clicando Aqui**](https://falabr.cgu.gov.br/web/home)
        3. Cheque sua caixa de E-mail. Em alguns casos o IPEM-MG pode responder via E-mail
        """)
    with st.expander("Posso solicitar dados de terceiros?"):
        st.markdown("""
        ‚ùå N√£o. Voc√™ s√≥ pode solicitar informa√ß√µes sobre seus pr√≥prios dados pessoais, para qualquer solicita√ß√£o √© necess√°rio um documento comprovat√≥rio para que seja analisado se os dados solicitados s√£o do titular, exceto:
        - Com autoriza√ß√£o judicial
        - Em casos de tutela coletiva
        """)

    # Rodap√©
    st.markdown("---")
    st.markdown(f"""
    <div style="text-align: center; color: gray;">
        ‚ÑπÔ∏è Atendimento regulamentado pela Lei n¬∫ 13.709/2018 (LGPD)<br>
        √öltima atualiza√ß√£o: {datetime.datetime.now().strftime("%d/%m/%Y")}
    </div>
    """, unsafe_allow_html=True)


    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: gray; margin-top: 40px;">
        ¬© 2025 IPEM-MG. Todos os direitos reservados.<br>
        R. Cristiano Fran√ßa Teixeira Guimar√£es, 80 - Cinco, Contagem - MG, 32010-130<br> 
        CNPJ: 17.322.264/0001-64 | Telefone:  (31) 3399-7134 / 08000 335 335
    </div>
    """, unsafe_allow_html=True)
