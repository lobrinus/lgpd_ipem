import streamlit as st
from datetime import datetime
import pytz
import firebase_admin
from firebase_admin import credentials, firestore

# Verifica se o usu√°rio est√° autenticado
if "cidadao_email" not in st.session_state or not st.session_state["cidadao_email"]:
    st.warning("üîí Voc√™ precisa estar logado para acessar o formul√°rio de solicita√ß√£o.")
    st.stop()

# Inicializar Firebase (se ainda n√£o iniciado)
if not firebase_admin._apps:
    cred = credentials.Certificate(dict(st.secrets["firebase"]))
    firebase_admin.initialize_app(cred)
db = firestore.client()

# Login vis√≠vel, mas n√£o obrigat√≥rio nesta p√°gina
from login import exibir_login
exibir_login()

# Inicializar Firebase
if not firebase_admin._apps:
    cred = credentials.Certificate(dict(st.secrets["firebase"]))
    firebase_admin.initialize_app(cred)
db = firestore.client()

st.title("üì® Solicita√ß√£o de Acesso a Dados Pessoais")

with st.form("formulario_lgpd"):
    nome = st.text_input("Nome completo", placeholder="Digite seu nome completo")
    telefone = st.text_input("Telefone de contato", placeholder="(xx) xxxxx-xxxx")
    email = st.text_input("E-mail de contato", placeholder="seuemail@exemplo.com")
    cpf = st.text_input("CPF", placeholder="Apenas n√∫meros")
    mensagem = st.text_area("Mensagem", placeholder="Descreva sua solicita√ß√£o")

    enviado = st.form_submit_button("üì© Enviar Solicita√ß√£o")

# Valida√ß√£o
if enviado:
    erros = []
    if not nome.strip():
        erros.append("‚ö†Ô∏è O campo **Nome** √© obrigat√≥rio.")
    if not telefone.strip():
        erros.append("‚ö†Ô∏è O campo **Telefone** √© obrigat√≥rio.")
    if not email.strip():
        erros.append("‚ö†Ô∏è O campo **E-mail** √© obrigat√≥rio.")
    elif "@" not in email or "." not in email:
        erros.append("‚ùå E-mail inv√°lido.")
    if not cpf.strip():
        erros.append("‚ö†Ô∏è O campo **CPF** √© obrigat√≥rio.")
    elif not cpf.isdigit() or len(cpf) != 11:
        erros.append("‚ùå CPF inv√°lido. Deve conter 11 d√≠gitos num√©ricos.")
    if not mensagem.strip():
        erros.append("‚ö†Ô∏è O campo **Mensagem** √© obrigat√≥rio.")

    if erros:
        for erro in erros:
            st.error(erro)
    else:
        # Salva solicita√ß√£o no Firestore
        br_tz = pytz.timezone("America/Sao_Paulo")
        data_envio = datetime.now(br_tz)
        email_autenticado = st.session_state.get("cidadao_email", email)

        db.collection("solicitacoes").add({
            "nome": nome.strip(),
            "telefone": telefone.strip(),
            "email": email_autenticado.strip(),
            "cpf": cpf.strip(),
            "mensagem": mensagem.strip(),
            "data_envio": data_envio,
            "resposta": None,
            "data_resposta": None,
            "lido": False
        })
        st.success("‚úÖ Solicita√ß√£o enviada com sucesso!")

# Mostrar resposta se houver
doc_ref = db.collection("solicitacoes").where("email", "==", email_autenticado).order_by("data_envio", direction=firestore.Query.DESCENDING).limit(1)
docs = doc_ref.stream()

for doc in docs:
    data = doc.to_dict()
    if data.get("resposta"):
        st.markdown("### üì¨ Resposta do IPEM-MG")
        st.success(data.get("resposta"))
        data_resposta = data.get("data_resposta")
        if isinstance(data_resposta, datetime):
            data_resposta = data_resposta.astimezone(pytz.timezone("America/Sao_Paulo")).strftime('%d/%m/%Y √†s %H:%M')
            st.caption(f"Enviado em: {data_resposta}")
