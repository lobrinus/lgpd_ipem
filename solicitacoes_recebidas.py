import streamlit as st
import datetime
import os
import json
import firebase_admin
from firebase_admin import credentials, firestore
from login_unificado import autenticar_usuario, registrar_usuario

def render():
    # Inicializa√ß√£o do Firebase (executa uma √∫nica vez)
    if not firebase_admin._apps:
        cred_json = os.getenv("FIREBASE_CREDENTIALS")
        cred_dict = json.loads(cred_json)
        cred = credentials.Certificate(cred_dict)
        firebase_admin.initialize_app(cred)
    db = firestore.client()

    st.markdown("<h1 style='text-align: center;'>üîê Painel LGPD</h1>", unsafe_allow_html=True)
    st.markdown("---")

    # Estado da sess√£o
    if "modo_auth" not in st.session_state:
        st.session_state["modo_auth"] = "login"  # "login" ou "registro"
    if "usuario" not in st.session_state:
        st.session_state["usuario"] = None

    # AUTENTICA√á√ÉO
    if st.session_state["usuario"] is None:
        st.subheader("Acesse ou crie sua conta")

        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîë Login"):
                st.session_state["modo_auth"] = "login"
        with col2:
            if st.button("üìù Registro"):
                st.session_state["modo_auth"] = "registro"
        st.markdown("---")

        if st.session_state["modo_auth"] == "login":
            with st.form("form_login"):
                st.subheader("üîë Login")
                email = st.text_input("E-mail*")
                senha = st.text_input("Senha*", type="password")
                login_submit = st.form_submit_button("Entrar")

                if login_submit:
                    if not email or not senha:
                        st.warning("Por favor, preencha todos os campos.")
                    else:
                        sucesso, resultado = autenticar_usuario(email, senha)
                        if sucesso:
                            st.session_state["usuario"] = resultado
                            st.success("‚úÖ Login realizado com sucesso!")
                            st.experimental_rerun()
                        else:
                            st.error(f"Erro ao fazer login: {resultado}")

        elif st.session_state["modo_auth"] == "registro":
            with st.form("form_registro"):
                st.subheader("üìù Registro")
                nome = st.text_input("Nome completo*")
                telefone = st.text_input("Telefone*")
                email_reg = st.text_input("E-mail*")
                senha_reg = st.text_input("Senha*", type="password")
                senha_conf = st.text_input("Confirme a senha*", type="password")
                registro_submit = st.form_submit_button("Registrar")

                if registro_submit:
                    if not all([nome.strip(), telefone.strip(), email_reg.strip(), senha_reg.strip(), senha_conf.strip()]):
                        st.warning("Por favor, preencha todos os campos obrigat√≥rios.")
                    elif senha_reg != senha_conf:
                        st.error("As senhas n√£o coincidem.")
                    elif len(senha_reg) < 6:
                        st.error("A senha deve ter pelo menos 6 caracteres.")
                    else:
                        try:
                            sucesso, msg = registrar_usuario(
                                email=email_reg,
                                senha=senha_reg,
                                nome=nome,
                                telefone=telefone,
                                tipo="cidadao"
                            )
                            if sucesso:
                                st.success("‚úÖ Registro conclu√≠do! Agora voc√™ pode fazer login.")
                                st.session_state["modo_auth"] = "login"
                                st.experimental_rerun()
                            else:
                                st.error(f"Erro no registro: {msg}")
                        except Exception as e:
                            st.error(f"Erro inesperado: {str(e)}")

        st.stop()  # N√£o prossegue sem login

    # Usu√°rio logado
    usuario = st.session_state["usuario"]
    col1, col2 = st.columns([4, 1])
    with col1:
        st.success(f"üë§ Logado como: {usuario['email']} ({usuario['tipo']})")
    with col2:
        if st.button("üö™ Sair"):
            st.session_state["usuario"] = None
            st.session_state["modo_auth"] = "login"
            st.experimental_rerun()

    # Tipos de solicita√ß√µes
    st.header("üìã Tipos de Solicita√ß√µes")
    with st.expander("üîç Confirmar Exist√™ncia de Dados (Artigo 18-I)"):
        st.markdown("""
        **O que voc√™ pode solicitar:**
        - Verifica√ß√£o se o IPEM-MG possui seus dados cadastrais

        **Documenta√ß√£o necess√°ria:**
        - C√≥pia do documento de identifica√ß√£o

        **Prazo m√°ximo:** 24 horas (resposta simplificada)
        """)
    with st.expander("üìÇ Acesso aos Dados (Artigo 18-II)"):
        st.markdown("""
        **O que voc√™ pode solicitar:**
        - C√≥pia completa de todos seus dados armazenados
        - Hist√≥rico de uso dos dados
        - Informa√ß√£o sobre o compartilhamento dos dados

        **Prazo m√°ximo:** 15 dias √∫teis
        """)
    with st.expander("‚úèÔ∏è Corre√ß√£o de Dados (Artigo 18-III)"):
        st.markdown("""
        **Quando solicitar:**
        - Dados desatualizados
        - Informa√ß√µes incorretas
        - Registros incompletos

        **Anexos obrigat√≥rios:**
        - Documento comprobat√≥rio da corre√ß√£o
        - Identifica√ß√£o v√°lida
        """)
    with st.expander("‚ÑπÔ∏è Informativa"):
        st.markdown("""
        - **Qualquer** informa√ß√£o relacionada √† **Lei de Prote√ß√£o de Dados**
        dever√° ser solicitada pelo formul√°rio abaixo.
        """)
    with st.expander("üóëÔ∏è Exclus√£o de Dados (Artigo 18-VI)"):
        st.markdown("""
        **Condi√ß√µes para exclus√£o:**
        - Dados coletados com consentimento
        - Finalidade original cumprida
        - Sem obriga√ß√£o legal de armazenamento

        **Exce√ß√µes Legais (Artigo 4¬∫ da LGPD):**  
        O IPEM-MG poder√° reter dados pessoais mesmo ap√≥s o cumprimento da finalidade original nos seguintes casos:
        - üîí **Seguran√ßa Nacional e Defesa:** Para prote√ß√£o do territ√≥rio nacional e atividades estrat√©gicas de Estado
        - üõ°Ô∏è **Investiga√ß√£o Criminal:** Em procedimentos de apura√ß√£o de infra√ß√µes penais sob tutela judicial
        - üö® **Emerg√™ncias de Sa√∫de P√∫blica:** Para controle de epidemias e prote√ß√£o coletiva (ex: pandemias)
        - üìä **Pesquisas Cient√≠ficas:** Estudos realizados por √≥rg√£os de pesquisa com dados anonimizados

        **Base Legal:**  
        *"Nos termos do Artigo 4¬∫, III da LGPD, esses tratamentos s√£o regidos por legisla√ß√£o espec√≠fica que garante medidas proporcionais e necess√°rias ao interesse p√∫blico, com total observ√¢ncia dos direitos fundamentais."*

        **‚ö†Ô∏è Aten√ß√£o:**  
        A reten√ß√£o nestes casos segue protocolos rigorosos de seguran√ßa e √© periodicamente auditada pela Autoridade Nacional de Prote√ß√£o de Dados (ANPD).
        """)

    st.markdown("---")
    st.header("üì® Minhas Solicita√ß√µes")

    # Filtro (exemplo: filtro por protocolo, tipo, status, etc)
    filtro_protocolo = st.text_input("Filtrar por protocolo (ex: LGPD-2023...)")
    filtro_tipo = st.selectbox("Filtrar por tipo", options=["Todos", "Acesso aos Dados", "Corre√ß√£o de Dados", "Exclus√£o de Dados", "Portabilidade", "Outros"])
    filtro_status = st.selectbox("Filtrar por status", options=["Todos", "Recebido", "Pendente", "Respondido", "Conclu√≠do"])

    solicitacoes = []
    query = db.collection("solicitacoes").where("usuario_id", "==", usuario['email'])

    if filtro_protocolo:
        query = query.where("protocolo", "==", filtro_protocolo.strip())
    if filtro_tipo != "Todos":
        query = query.where("tipo", "==", filtro_tipo)
    if filtro_status != "Todos":
        query = query.where("status", "==", filtro_status)

    docs = query.stream()
    for doc in docs:
        solicitacoes.append((doc.id, doc.to_dict()))

    if not solicitacoes:
        st.info("Nenhuma solicita√ß√£o encontrada com esses filtros.", icon="‚ÑπÔ∏è")

    # Mostrar as solicita√ß√µes
    for doc_id, data in sorted(solicitacoes, key=lambda x: x[1].get("data_envio", ""), reverse=True):
        protocolo = data.get("protocolo", "")
        tipo = data.get("tipo", "")
        status = data.get("status", "Pendente")
        descricao = data.get("descricao", "") or ""
        resposta = data.get("resposta", None)

        with st.expander(f"Protocolo: {protocolo} | Tipo: {tipo} | Status: {status}"):
            st.markdown("### Descri√ß√£o da solicita√ß√£o:")
            st.text_area("Solicita√ß√£o do cidad√£o", value=descricao, disabled=True, height=150)

            if resposta:
                st.success("üì¢ Sua solicita√ß√£o foi respondida:")
                st.markdown(f"**Resposta:** {resposta}")

            # Se for admin, pode responder e excluir
            if usuario["tipo"] == "admin":
                with st.form(f"form_resposta_{doc_id}"):
                    resposta_admin = st.text_area("Responder solicita√ß√£o", value=resposta or "")
                    enviar_resposta = st.form_submit_button("Enviar resposta")
                    if enviar_resposta:
                        try:
                            doc_ref = db.collection("solicitacoes").document(doc_id)
                            doc_ref.update({
                                "resposta": resposta_admin,
                                "status": "Respondido",
                                "data_resposta": datetime.datetime.now().isoformat()
                            })
                            st.success("Resposta enviada com sucesso!")
                            st.experimental_rerun()
                        except Exception as e:
                            st.error(f"Erro ao enviar resposta: {str(e)}")

                if st.button(f"üóëÔ∏è Excluir solicita√ß√£o {protocolo}", key=f"del_{doc_id}"):
                    try:
                        db.collection("solicitacoes").document(doc_id).delete()
                        st.success(f"Solicita√ß√£o {protocolo} exclu√≠da com sucesso!")
                        st.experimental_rerun()
                    except Exception as e:
                        st.error(f"Erro ao excluir solicita√ß√£o: {str(e)}")

    st.markdown("---")
    st.header("üì® Nova Solicita√ß√£o")
    with st.form("nova_solicitacao"):
        email_solicitante = st.text_input("Seu e-mail*", value=usuario["email"], disabled=True)
        tipo_solicitacao = st.selectbox("Tipo da solicita√ß√£o", ["Acesso aos Dados", "Corre√ß√£o de Dados", "Exclus√£o de Dados", "Portabilidade", "Outros"])
        descricao_solicitacao = st.text_area("Descreva sua solicita√ß√£o*", height=150)
        enviar = st.form_submit_button("Enviar Solicita√ß√£o")

        if enviar:
            if not descricao_solicitacao.strip():
                st.warning("A descri√ß√£o da solicita√ß√£o √© obrigat√≥ria.")
            else:
                protocolo_novo = f"LGPD-{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
                try:
                    db.collection("solicitacoes").add({
                        "usuario_id": usuario["email"],
                        "protocolo": protocolo_novo,
                        "tipo": tipo_solicitacao,
                        "descricao": descricao_solicitacao,
                        "status": "Recebido",
                        "data_envio": datetime.datetime.now().isoformat(),
                        "resposta": None
                    })
                    st.success(f"Solicita√ß√£o enviada com sucesso! Protocolo: {protocolo_novo}")
                    st.experimental_rerun()
                except Exception as e:
                    st.error(f"Erro ao enviar solicita√ß√£o: {str(e)}")
