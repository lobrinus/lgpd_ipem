from streamlit_option_menu import option_menu
import streamlit as st

# Configura√ß√£o da p√°gina (deve ser o primeiro comando Streamlit)
st.set_page_config(
    page_title="Portal LGPD - IPEM-MG",
    page_icon="üìò",  # Ou o caminho para um √≠cone .png/.ico, ex: "img_lgpd/icone.png"
    layout="wide"
)

# Importa login_unificado para garantir que o Firebase seja inicializado.
# Essencial para que st.session_state e db estejam dispon√≠veis globalmente se necess√°rio.
try:
    import login_unificado
except ImportError:
    st.error("ERRO CR√çTICO: O arquivo 'login_unificado.py' n√£o foi encontrado. A aplica√ß√£o n√£o pode continuar.")
    st.stop() # Impede a execu√ß√£o do restante da aplica√ß√£o

# --- Barra Lateral (Sidebar) ---
# Certifique-se que 'icone_ipem.png' est√° na pasta raiz ou forne√ßa o caminho correto.
# Exemplo se estiver em uma subpasta: "img_lgpd/icone_ipem.png"
try:
    st.sidebar.image("icone_ipem.png", use_container_width=True)
except Exception as e:
    st.sidebar.warning(f"N√£o foi poss√≠vel carregar a imagem 'icone_ipem.png': {e}")

with st.sidebar:
    # Exibe informa√ß√µes do usu√°rio logado
    if st.session_state.get("logado", False):
        email_logado_sidebar = st.session_state.get("email", "N/A")
        nome_logado_sidebar = st.session_state.get("nome_usuario", "") # Obt√©m o nome da sess√£o
        tipo_usuario_sidebar = st.session_state.get("tipo_usuario", "cidadao").capitalize()

        display_name_sidebar = nome_logado_sidebar if nome_logado_sidebar else email_logado_sidebar

    st.markdown(
                f"""
                <div style="
                    border: 1px solid #ddd; /* Borda cinza clara */
                    background-color: #f9f9f9; /* Fundo levemente acinzentado */
                    padding: 12px;
                    border-radius: 8px;
                    color: #333; /* Cor do texto escura */
                    font-weight: bold;
                    margin-bottom: 20px;
                    word-break: break-word;
                    box-shadow: 0 1px 3px rgba(0,0,0,0.08); /* Sombra suave */
                ">
                    <span style="font-size: 0.9em; color: #555;">Usu√°rio:</span> {display_name_sidebar}<br>
                    <span style="font-size: 0.9em; color: #555;">Perfil:</span> {tipo_usuario_sidebar}
                </div>
                """,
                unsafe_allow_html=True
            )
        # Bot√£o de Logout na Sidebar
        if st.button("üö™ Sair / Logout", key="sidebar_btn_logout_main", use_container_width=True):
            keys_to_clear = ["logado", "email", "tipo_usuario", "nome_usuario",
                             "admin_email", "modo_auth_painel", "usuario"] # Adicione outras chaves de sess√£o
            for key_clear in keys_to_clear:
                if key_clear in st.session_state:
                    del st.session_state[key_clear]
            st.success("Logout realizado com sucesso!")
            st.rerun()
    else:
        st.info("Bem-vindo(a)! Para interagir com as solicita√ß√µes, acesse o 'Painel LGPD' e fa√ßa login ou registre-se.")

    # --- Defini√ß√£o do Menu de Navega√ß√£o ---
    menu_items_sidebar = [
        "üè† P√°gina Principal",
        "üë§ Painel LGPD",
        "‚úÖ Boas Pr√°ticas",
        "üîç Orienta√ß√£o de Dados Pessoais",
        "üë• Quem Lida com os Dados",
        "üìú Pol√≠tica de Privacidade",
        "üõ°Ô∏è Mitiga√ß√£o de Riscos",
        "‚öñÔ∏è Princ√≠pios B√°sicos",
        "‚úÖ O Que Fazer e N√£o Fazer",
        "üîÑ Fluxo de Dados LGPD",
        "‚ùì FAQ"
    ]
    menu_icons_sidebar = ["house-door-fill", "person-badge-fill", "patch-check-fill", "search-heart-fill",
                          "people-fill", "file-earmark-text-fill", "shield-lock-fill", "bank",
                          "hand-thumbs-up-fill", "arrows-angle-contract", "question-circle-fill"] # √çcone "arrows- ŒºŒ≠œÉœâ-fill" n√£o √© padr√£o, trocado.

    if st.session_state.get("logado", False) and st.session_state.get("tipo_usuario") == "admin":
        admin_menu_item = "üìÅ Solicita√ß√µes Recebidas"
        admin_menu_icon = "folder2-open" # √çcone para o painel admin
        if admin_menu_item not in menu_items_sidebar:
            menu_items_sidebar.insert(2, admin_menu_item) # Posi√ß√£o 2 (terceiro item)
            menu_icons_sidebar.insert(2, admin_menu_icon)

    try:
        pagina_selecionada_sidebar = option_menu(
            "Menu Principal",
            options=menu_items_sidebar,
            icons=menu_icons_sidebar,
            menu_icon="list-stars", # √çcone do menu
            default_index=0,
            orientation="vertical",
            styles={
                "container": {"padding": "5px !important", "background-color": "#f0f2f6"}, # Cor de fundo suave
                "icon": {"color": "#0d6efd", "font-size": "20px"}, # Azul para √≠cones
                "nav-link": {"font-size": "16px", "text-align": "left", "margin":"0px", "--hover-color": "#dde"},
                "nav-link-selected": {"background-color": "#0d6efd", "color": "white"}, # Azul para selecionado
            }
        )
    except Exception as e_option_menu:
        st.error(f"Erro ao renderizar o menu de navega√ß√£o: {e_option_menu}")
        st.stop() # Impede a continua√ß√£o se o menu falhar

# --- L√≥gica de Renderiza√ß√£o de P√°ginas ---
# Cada 'nome_do_arquivo.py' deve ter uma fun√ß√£o render()
PAGES = {
    "üè† P√°gina Principal": "pagina_principal",
    "üë§ Painel LGPD": "painel_lgpd",
    "üìÅ Solicita√ß√µes Recebidas": "solicitacoes_recebidas", # Apenas para admin
    "‚úÖ Boas Pr√°ticas": "boas_praticas",
    "üîç Orienta√ß√£o de Dados Pessoais": "orientacao_dados",
    "üë• Quem Lida com os Dados": "quem_lida",
    "üìú Pol√≠tica de Privacidade": "politica_privacidade",
    "üõ°Ô∏è Mitiga√ß√£o de Riscos": "mitigacao_riscos",
    "‚öñÔ∏è Princ√≠pios B√°sicos": "principios",
    "‚úÖ O Que Fazer e N√£o Fazer": "fazer_nao_fazer",
    "üîÑ Fluxo de Dados LGPD": "fluxo_dados",
    "‚ùì FAQ": "faq"
}

# Verifica se a p√°gina selecionada existe no mapeamento
if pagina_selecionada_sidebar in PAGES:
    module_name = PAGES[pagina_selecionada_sidebar]

    # Tratamento especial para a p√°gina de admin
    if module_name == "solicitacoes_recebidas":
        if st.session_state.get("logado", False) and st.session_state.get("tipo_usuario") == "admin":
            try:
                module = __import__(module_name)
                module.render()
            except ImportError:
                st.error(f"M√≥dulo '{module_name}.py' n√£o encontrado. Verifique o nome do arquivo.")
            except AttributeError:
                st.error(f"M√≥dulo '{module_name}.py' n√£o possui a fun√ß√£o 'render()'.")
            except Exception as e_render:
                st.error(f"Erro ao renderizar a p√°gina '{pagina_selecionada_sidebar}': {e_render}")
        else:
            # Se n√£o for admin e tentar acessar, redireciona ou mostra erro
            st.error("üö´ Acesso negado. Esta p√°gina √© exclusiva para administradores.")
            st.info("Se voc√™ √© um administrador, por favor, fa√ßa login.")
            if st.button("Ir para Login no Painel LGPD", key="redirect_login_admin_main"):
                # Para mudar a p√°gina via c√≥digo, voc√™ precisaria de uma l√≥gica mais complexa
                # ou usar st.experimental_set_query_params e tratar na pr√≥xima execu√ß√£o.
                # A forma mais simples √© instruir o usu√°rio.
                st.warning("Por favor, selecione 'Painel LGPD' no menu para fazer login.")
    else:
        # Para todas as outras p√°ginas
        try:
            module = __import__(module_name)
            module.render()
        except ImportError:
            st.error(f"M√≥dulo '{module_name}.py' n√£o encontrado. Verifique o nome do arquivo.")
            st.info(f"Dica: Crie um arquivo chamado '{module_name}.py' na raiz do projeto com uma fun√ß√£o 'def render(): st.write(\"Conte√∫do de {pagina_selecionada_sidebar}\")'.")
        except AttributeError:
            st.error(f"M√≥dulo '{module_name}.py' n√£o possui uma fun√ß√£o chamada 'render()'.")
            st.info(f"Dica: No arquivo '{module_name}.py', defina uma fun√ß√£o 'def render():'.")
        except Exception as e_render_geral:
            st.error(f"Erro inesperado ao renderizar a p√°gina '{pagina_selecionada_sidebar}': {e_render_geral}")
else:
    st.error(f"P√°gina '{pagina_selecionada_sidebar}' n√£o reconhecida pelo sistema de navega√ß√£o.")

